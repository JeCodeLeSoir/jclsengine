export default class Vector2 {
    private _x;
    private _y;
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    constructor(x?: number, y?: number);
    static get zero(): Vector2;
    static get one(): Vector2;
    static get up(): Vector2;
    static get down(): Vector2;
    static get left(): Vector2;
    static get right(): Vector2;
    static get positiveInfinity(): Vector2;
    static get negativeInfinity(): Vector2;
    static get epsilon(): Vector2;
    static get max(): Vector2;
    static get min(): Vector2;
    get Normalized(): Vector2;
    Set(x: number, y: number): Vector2;
    private static Add;
    Add(vector: Vector2 | number): Vector2;
    AddNR(vector: Vector2 | number): void;
    private static Subtract;
    Subtract(vector: Vector2 | number): Vector2;
    SubtractNR(vector: Vector2 | number): void;
    private static Multiply;
    Multiply(vector: Vector2 | number): Vector2;
    MultiplyNR(vector: Vector2 | number): void;
    private static Divide;
    Divide(vector: Vector2 | number): Vector2;
    DivideNR(vector: Vector2 | number): void;
    Dot(vector: Vector2): number;
    Cross(vector: Vector2): number;
    Angle(): number;
    AngleBy(vector: Vector2): number;
    Lerp(vector: Vector2, t: number): Vector2;
    Equals(vector: Vector2): boolean;
    Clone(): Vector2;
    ToString(): string;
    Length(): number;
    LengthSq(): number;
    Distance(vector: Vector2): number;
    get Magnitude(): number;
    get SqrtMagnitude(): number;
    SqrtDistance(vector: Vector2): number;
    RoundNR(): void;
    Round(): Vector2;
    Rotate(angle: number): Vector2;
    RotateAround(angle: number, pivot: Vector2): Vector2;
}
