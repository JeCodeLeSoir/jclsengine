import { ColliderShap, PhysicsCollider2d } from "../physics/physics.js";
import Tags from "./tags.js";
import Vector2 from "./vector2.js";
export default abstract class Behavior {
    private _IsEnabled;
    private _isLoaded;
    private _isDestroyed;
    private _collisionEnter;
    private _parent;
    protected Tag: Tags;
    protected DisplayOrder: number;
    protected IsPhysics: boolean;
    physicsCollider: PhysicsCollider2d | null;
    shap: ColliderShap | null;
    set IsEnabled(isEnabled: boolean);
    get IsEnabled(): boolean;
    GetParent(): Behavior | null;
    get Forward(): Vector2;
    get Right(): Vector2;
    localPosition: Vector2;
    position: Vector2;
    localRotation: number;
    rotation: number;
    SetPosition(position: Vector2): void;
    GetIsPhysics(): boolean;
    GetTag(): Tags;
    SetTag(tag: Tags): void;
    SetCollisionEnter(Enter: boolean): void;
    GetCollisionEnter(): boolean;
    GetDisplayOrder(): number;
    Load(): void;
    Init(ctx: CanvasRenderingContext2D): void;
    Copy(): Behavior;
    InitPhysics(): void;
    TransformToLocal(parent: Behavior, position: Vector2): Vector2;
    TransformToGlobal(parent: Behavior, position: Vector2): Vector2;
    SetParent(parent: Behavior): void;
    ApplyTransform(): void;
    Update(deltaTime: number): void;
    Draw(ctx: CanvasRenderingContext2D, deltaTime: number): void;
    Destroy(): void;
    abstract OnDestroy(): void;
    OnCollisionEnter(other: Behavior): void;
    OnCollisionExit(other: Behavior): void;
    GetIsDestroyed(): boolean;
    GetIsLoaded(): boolean;
    static Instantiate<T extends Behavior>(behavior: T, behavior_parent?: Behavior | null, notLoad?: boolean): T;
    Instantiate<T extends Behavior>(behavior: T, behavior_parent?: Behavior | null, notLoad?: boolean): T;
    setIsLoaded(isLoaded: boolean): void;
}
